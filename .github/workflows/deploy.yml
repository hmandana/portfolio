name: Deploy Portfolio to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'cdn-assets/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'cdn-assets/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig.json'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Validate CDN assets and dependencies
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Validate CDN Assets
      run: |
        echo "üìã Validating CDN assets..."
        if [ -d "cdn-assets/skills" ]; then
          echo "‚úÖ CDN assets directory exists"
          echo "üìä Found $(find cdn-assets/skills -type f | wc -l) skill images"
          ls -la cdn-assets/skills/ | head -10
        else
          echo "‚ö†Ô∏è CDN assets directory not found"
        fi
        
    - name: Validate Environment Files
      run: |
        echo "üìã Validating environment configuration..."
        if [ -f "src/config/cdn.ts" ]; then
          echo "‚úÖ CDN configuration exists"
        else
          echo "‚ùå CDN configuration missing"
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        npm ci
        echo "‚úÖ Dependencies installed successfully"
        
    - name: Validate GraphQL Schema
      run: |
        echo "üîç Validating GraphQL queries..."
        # Check if GraphQL files exist and are valid
        if [ -f "src/graphql/queries.ts" ]; then
          echo "‚úÖ GraphQL queries found"
        else
          echo "‚ùå GraphQL queries missing"
          exit 1
        fi
        
        # Validate database operations utility exists
        if [ -f "server/utils/db-operations.js" ]; then
          echo "‚úÖ Database operations utility found"
        else
          echo "‚ùå Database operations utility missing"
          exit 1
        fi
        
    - name: Lint code
      run: |
        echo "üîç Running linter..."
        npm run lint
        echo "‚úÖ Linting completed successfully"
      
    - name: Type check
      run: |
        echo "üîç Running TypeScript type check..."
        npx tsc --noEmit
        echo "‚úÖ Type checking completed successfully"
        
    - name: Build application
      run: |
        echo "üèóÔ∏è Building application..."
        npm run build
        echo "‚úÖ Build completed successfully"
      env:
        NODE_ENV: production
        VITE_GRAPHQL_ENDPOINT: ${{ secrets.VITE_GRAPHQL_ENDPOINT || 'http://localhost:4000/graphql' }}
        
    - name: Verify build output
      run: |
        echo "üìã Verifying build output..."
        if [ -d "dist" ]; then
          echo "‚úÖ Dist directory created"
          echo "üìä Build size: $(du -sh dist | cut -f1)"
          echo "üìÅ Build contents:"
          find dist -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
        else
          echo "‚ùå Build failed - dist directory not found"
          exit 1
        fi
        
    - name: Test CDN URLs (Production)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üåê Testing CDN accessibility..."
        # Test if jsDelivr CDN is accessible
        if curl -f -s "https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/cdn-assets/skills/javascript.png" > /dev/null; then
          echo "‚úÖ jsDelivr CDN is accessible"
        else
          echo "‚ö†Ô∏è jsDelivr CDN not yet available (this is normal for first deployment)"
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

