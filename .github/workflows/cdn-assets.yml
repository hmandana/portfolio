name: CDN Asset Management

on:
  push:
    branches: [ main ]
    paths:
      - 'cdn-assets/**'
  workflow_dispatch:
    inputs:
      purge_cache:
        description: 'Purge CDN cache'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-assets:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Validate asset structure
      run: |
        echo "🔍 Validating CDN asset structure..."
        
        # Check if cdn-assets directory exists
        if [ ! -d "cdn-assets" ]; then
          echo "❌ cdn-assets directory not found"
          exit 1
        fi
        
        # Check if skills directory exists
        if [ ! -d "cdn-assets/skills" ]; then
          echo "❌ cdn-assets/skills directory not found"
          exit 1
        fi
        
        # Count and validate image files
        image_count=$(find cdn-assets/skills -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" -o -name "*.webp" \) | wc -l)
        echo "📊 Found $image_count image files"
        
        if [ $image_count -eq 0 ]; then
          echo "⚠️ No image files found in cdn-assets/skills"
          exit 1
        fi
        
        # List all images for verification
        echo "📁 CDN Assets inventory:"
        find cdn-assets/skills -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" -o -name "*.webp" \) | sort
        
    - name: Check file sizes
      run: |
        echo "📊 Checking asset file sizes..."
        
        # Check if any files are too large (>500KB)
        large_files=$(find cdn-assets/skills -type f -size +500k)
        if [ -n "$large_files" ]; then
          echo "⚠️ Large files detected (>500KB):"
          echo "$large_files" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "  $file: $size"
          done
          echo "💡 Consider optimizing these images for better CDN performance"
        else
          echo "✅ All asset files are optimally sized"
        fi
        
        # Calculate total size
        total_size=$(du -sh cdn-assets/skills | cut -f1)
        echo "📊 Total CDN assets size: $total_size"

  test-cdn:
    runs-on: ubuntu-latest
    needs: validate-assets
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Wait for GitHub to sync
      run: |
        echo "⏳ Waiting for GitHub to sync assets..."
        sleep 30
        
    - name: Test GitHub Raw CDN
      run: |
        echo "🌐 Testing GitHub Raw CDN accessibility..."
        
        # Test a few key assets
        test_files=("javascript.png" "react.png" "nodejs.png" "typescript.png")
        
        for file in "${test_files[@]}"; do
          url="https://raw.githubusercontent.com/${{ github.repository }}/main/cdn-assets/skills/$file"
          echo "Testing: $url"
          
          if curl -f -s -I "$url" > /dev/null; then
            echo "✅ $file is accessible via GitHub Raw"
          else
            echo "❌ $file is not accessible via GitHub Raw"
          fi
        done
        
    - name: Test jsDelivr CDN (with retry)
      run: |
        echo "🚀 Testing jsDelivr CDN accessibility..."
        echo "⏳ Note: jsDelivr may take a few minutes to pick up new files"
        
        # Test a few key assets with retry logic
        test_files=("javascript.png" "react.png" "nodejs.png" "typescript.png")
        
        for file in "${test_files[@]}"; do
          url="https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/cdn-assets/skills/$file"
          echo "Testing: $url"
          
          # Try up to 3 times with delays
          success=false
          for attempt in 1 2 3; do
            if curl -f -s -I "$url" > /dev/null; then
              echo "✅ $file is accessible via jsDelivr (attempt $attempt)"
              success=true
              break
            else
              echo "⏳ $file not yet available via jsDelivr (attempt $attempt)"
              sleep 10
            fi
          done
          
          if [ "$success" = false ]; then
            echo "⚠️ $file not accessible via jsDelivr yet (this is normal for new files)"
          fi
        done

  purge-cache:
    runs-on: ubuntu-latest
    needs: [validate-assets, test-cdn]
    if: github.event.inputs.purge_cache == 'true' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[purge-cache]'))
    steps:
    - name: Purge jsDelivr Cache
      run: |
        echo "🔄 Purging jsDelivr CDN cache..."
        
        # Purge the entire package cache
        cache_purge_url="https://purge.jsdelivr.net/gh/${{ github.repository }}@main/cdn-assets/"
        
        if curl -f -s "$cache_purge_url" > /dev/null; then
          echo "✅ jsDelivr cache purged successfully"
        else
          echo "⚠️ Cache purge may have failed or is not needed"
        fi
        
        echo "💡 Cache purge initiated. Changes may take a few minutes to propagate globally."

  notify:
    runs-on: ubuntu-latest
    needs: [validate-assets, test-cdn]
    if: always()
    steps:
    - name: Summary
      run: |
        echo "📋 CDN Asset Management Summary"
        echo "================================"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        echo "🌐 CDN URLs:"
        echo "GitHub Raw: https://raw.githubusercontent.com/${{ github.repository }}/main/cdn-assets/skills/"
        echo "jsDelivr: https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/cdn-assets/skills/"
        echo ""
        echo "💡 To purge jsDelivr cache manually:"
        echo "https://purge.jsdelivr.net/gh/${{ github.repository }}@main/cdn-assets/"
